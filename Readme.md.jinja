# Awesome Neural Cellular Automata
A list of paper and resources regarding Neural Cellular Automata. Last updated: {{ date[:10] }}.

> [!NOTE]
> This repository has been researched, compiled, and maintained to the best of my knowledge and ability.
> While I strive for accuracy and completeness, there may be mistakes or updates needed over time.
> I welcome suggestions, improvements, and contributions from the community.
> Please feel free to open an issue or submit a pull request if you have any recommendations or changes.
>
> To contribute, please update the `papers.yaml` and `Readme.md.jinja` files.
> Running `yaml2md.py` generates the `Readme.md`, and any manual edits to `Readme.md` will be overwritten.
>
> Thank you for your support and collaboration!

## Seminal Paper introducing Neural Cellular Automata
<table>
<tr>
<td width="150px">
<a href="https://colab.research.google.com/github/google-research/self-organising-systems/blob/master/notebooks/growing_ca.ipynb" target="_blank">
    <img src="assets/thumbnails/2020-02-11growingneu_mordvintsev.jpg" width="140px">
</a>
</td>
<td>

### Growing Neural Cellular Automata
Published on **2020-02-11** by

Alexander **Mordvintsev**, Ettore **Randazzo**, Eyvind **Niklasson**, Michael **Levin**

[Code](https://colab.research.google.com/github/google-research/self-organising-systems/blob/master/notebooks/growing_ca.ipynb) | [Project Page](https://distill.pub/2020/growing-ca/)

<details>
<summary><b>Abstract</b></summary>
Training an end-to-end differentiable, self-organising cellular automata model of morphogenesis, able to both grow and regenerate specific patterns.
</details>

</td>
</tr>


</table>

## Implementations
- [Original reference](https://colab.research.google.com/github/google-research/self-organising-systems/blob/master/notebooks/growing_ca.ipynb)
- [CAX](https://github.com/maxencefaldor/cax) - Cellular Automata in JAX (Flax NNX)
- [JAX-NCA](https://github.com/shyamsn97/jax-nca) - NCA Implementation in JAX (Flax Linen)
- [Hexells](https://github.com/znah/hexells) - SwissGL Implementation of Hexells ([Demo](https://znah.net/hexells/))

## List of Publications
<picture>
  <source media="(prefers-color-scheme: dark)" srcset="assets/papers_per_quarter_dark.svg">
  <source media="(prefers-color-scheme: light)" srcset="assets/papers_per_quarter_light.svg">
  <img alt="Histogram of number of publications per quarter." src="">
</picture>

![](assets/papers_per_quarter.png)
{%- for paper in papers | sort(attribute="year", reverse=true) -%}
{# Update year if needed #}
{%- if loop.changed(paper["year"][:4]) -%}
{% if not loop.first %}
</table>
{% endif %}

### {{ paper["year"][:4] }}
<table>
{%- endif -%}
{# Create paper entry #}
{%- set pdf_link = paper["urls"]["arxiv"].replace("/abs/", "/pdf/") if "arxiv" in paper["urls"] else paper["urls"].values() | select("string") | first -%}
<tr>
<td width="150px">
<a href="{{ pdf_link }}" target="_blank">
    <img src="{{ paper['thumbnail'] }}" width="140px">
</a>
</td>
<td>

#### {{ paper["title"] }}
Published on **{{ paper["year"] }}** by

{% for author in paper["authors"] %}{{ author[0] }} **{{ author[1] }}**{% if not loop.last %}, {% endif %}{% endfor %}

{% set links = [] %}
{%- for key, url in paper["urls"].items() if url -%}
    {%- set _ = links.append("[" ~ key.replace('_', ' ').title() ~ "](" ~ url ~ ")") -%}
{%- endfor -%}
{{ links | join(" | ") }}

<details>
<summary><b>Abstract</b></summary>
{{ paper["abstract"] }}
</details>

</td>
</tr>

{%- endfor -%}
</table>


## Further Reading
- **Videos & Tutorials**
  - [Mildly Overfitted](https://www.youtube.com/watch?v=21ACbWoF2Oo) – Tutorial & code explanation (PyTorch)
  - [Yannic Kilcher](https://www.youtube.com/watch?v=9Kec_7WFyp0) – Paper explanation

- **Courses**
  - [Artificial Life by Vassilis Papadopoulos](https://vassi.life/teaching/alife)
    - [Lecture 10: Neural Cellular Automata](https://frotaur.notion.site/Course-10-Neural-Cellular-automata-63d6eb2efe9443b4b2c3a09a55f493a0) ([Video Recording](https://www.youtube.com/watch?v=_ealiM25biA))
  - [AIAIArt Course by John Whitaker](https://github.com/johnowhitaker/aiaiart)
    - [Lesson #8: Neural CA](https://colab.research.google.com/drive/1Qpx_4wWXoiwTRTCAP1ohpoPGwDIrp9z-) ([Video Recording](https://www.youtube.com/watch?v=X2-ucB74oEk))
    - [Full YouTube Playlist](https://www.youtube.com/playlist?list=PL23FjyM69j910zCdDFVWcjSIKHbSB7NE8)

- **Projects & Tools**
  - [NeuralCA.org](https://www.neuralca.org/) | [GitHub](https://github.com/MonashDeepNeuron/Neural-Cellular-Automata)
  - [Google Self-organising Systems](https://github.com/google-research/self-organising-systems/)

- **Others**
  - Alexander Mordvintsev: [Website](https://znah.net/) | [YouTube](https://www.youtube.com/@zzznah) | [Twitter/X](https://x.com/zzznah) | [GitHub](https://github.com/znah)
  - [International Society for Artificial LIFE (ISAL)](https://alife.org/)
  - [Awesome Cellular Automata](https://github.com/vovanmozg/awesome-cellular-automata) – curated list of CA resources
